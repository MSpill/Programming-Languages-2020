# Grammar for Jumpy
# Created by Matthew Spillman, Westminster Schools
# Atlanta, GA
# Spring 2020
# The language has no conditional or loop keywords, just jmp x or jmp str statements which jump the program x lines ahead or to the marker named str
# which jump the program x lines ahead or to line x.
# newlines are built in as the terminators of statements
# I think this would be turing-complete when combining jmp statements with integer division

program : optNewLines statementList

statementList   : statement 
                | statement newlines statementList

optNewLines : empty
            | newLines

newLines    : NEWLINE
            | NEWLINE newLines

statement   : variableDeclaration 
            | variableAssignment 
            | marker
            | jumpStatement
            | printStatement

variableDeclaration : variableType variableAssignment

variableAssignment : VARIABLE EQUALS expression

variableType : INTTYPE
             | STRINGTYPE # may add more

marker : VARIABLE COLON

jumpStatement   : JMP expression # expression may be a string

printStatement : PRINTLN expression

expression  : unary 
            | unary operator expression

unary   : VARIABLE 
        | INTEGER
        | STRING
        | MINUS unary
        | OPAREN expression CPAREN

operator    : PLUS 
            | MINUS 
            | TIMES 
            | DIVIDE

# Example program to print the numbers from 0 to 99 then print -1
#1 int i = 0
#2 int check = 0
#3 check = (i/100) // integer casts to 0 if i<100 and 1 if 99<i<200
#4 jmp check*3+1 // jump either 4 or 1 lines ahead
#5 println i
#6 i = i + 1
#7 jmp -4 // to line 3
#8 println -1

# Example program to raise an integer base to an integer power
#1 int base = 3
#2 int power = 3
#3 int i = 0
#4 int result = 1
#4 int check = 0
#5 check = (i/power) // 0 if i < power
#6 jmp check*3+1 // jump either 1 or 4 lines
#7 result = result*base
#8 i = i + 1
#9 jmp -4 // to line 5
#10 println result