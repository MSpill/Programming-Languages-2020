# Grammar for
# Created by Matthew Spillman, Westminster Schools
# Atlanta, GA
# Spring 2020
# The language has no conditional or loop keywords, just jmp x and jmpabs x statements
# which jump the program x lines ahead or to line x.
# I think this would be turing-complete when combining jmp statements with integer division

program : statementList

statementList : statement | statement NEWLINE statementList

statement : variableDeclaration | variableAssignment | jumpStatement | printStatement

variableDeclaration : variableType variableAssignment

variableAssignment: VARIABLE EQUALS expression NEWLINE

variableType : INT # may add more

jumpStatement : JMP expression NEWLINE | JMPABS expression NEWLINE

printStatement : PRINTLN expression NEWLINE

expression : unary | unary operator expression

unary : VARIABLE | NUMBER | MINUS unary | OPAREN expression CPAREN

operator : PLUS | MINUS | TIMES | DIVIDE

# Example program to print the numbers from 0 to 99 then print -1
#1 int i = 0
#2 int check = 0
#3 check = (i/100) // integer casts to 0 if i<100 and 1 if 99<i<200
#4 jmp check*3+1 // jump either 4 or 1 lines ahead
#5 println i
#6 i = i + 1
#7 jmp -4 // to line 3
#8 println -1

# Example program to raise an integer base to an integer power
#1 int base = 3
#2 int power = 3
#3 int i = 0
#4 int result = 1
#4 int check = 0
#5 check = (i/power) // 0 if i < power
#6 jmp check*2+1 // jump either 1 or 3 lines
#7 result = result*base
#8 jmp -3 // to line 5
#9 println result