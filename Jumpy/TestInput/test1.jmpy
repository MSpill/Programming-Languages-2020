float{} floatFuncParams = float{0}
float floatFuncResult = 0 + (1 - 1)
str funcReturnLocation = ""

int i = 0

| We got a multiline comment out here

ya yeet |

| This part prints the integers from  0 to 99 |
start:
    jmp [i < 100 ? 1 : "end"]
    println i
    i = i + 1
    jmp "start"
end:
    println "Done with part 1"

float{} results = float{12}
float num = 1.3
i = 0

| This part saves the first 12 powers of num into results |
start2:
    floatFuncParams = float{2}
    floatFuncParams @ 0 = num
    floatFuncParams @ 1 = i
    funcReturnLocation = "afterMult"
    jmp "multTwoNumbers"
    afterMult:
    results @ i = floatFuncResult
    i = i + 1
    jmp [i > 11 ? "start2" : "end2"]
end2:
    println "Done with part 2"
    jmp endOfProgram

multTwoNumbers:
    floatFuncResult = floatFuncParams @ 0 * floatFuncParams @ 1
    jmp funcReturnLocation

endOfProgram:

